@page "/InventoryItem/{Id}"
@using Services;
@using V_INVENTORY.MODEL;
@using V_INVENTORY.MODEL.Models;
@inject InventoryItemService ItemService
@inject InventoryItemLocationService LocationService
@inject NavigationManager Navigation

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h2>@ItemToView?.Name</h2>
                    <div>
                        <button class="btn btn-primary" @onclick="EditItem">
                            <span class="oi oi-pencil"></span>
                            Edit
                        </button>
                        <button class="btn btn-danger" @onclick="DeleteItem">
                            <span class="oi oi-trash"></span>
                            Delete
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (ItemToView != null)
                    {
                        <div class="row">
                            <div class="col-lg-6">
                                <ImageSlider Images="@Images" />
                            </div>
                            <div class="col-lg-6">
                                <p><strong>Status: </strong>@ItemToView.Status</p>
                                <p><strong>Quantity: </strong>@ItemToView.Quantity</p>
                                <p><strong>Location: </strong>@ItemToView.Location.Name</p>
                                <p><strong>Buy Price: </strong>@FormattedPrice</p>
                                <p><strong>Buy Date: </strong>@ItemToView.BuyDate.ToString("yyyy-MM-dd")</p>
                                
                                @if (ItemToView.Description != null && !string.IsNullOrWhiteSpace(ItemToView.Description))
                                {
                                    <h3>Description</h3>
                                    <textarea rows="5" width = "100%" readonly style="resize: none;">@ItemToView.Description</textarea>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private InventoryItem? ItemToView = null;
    private List<UploadedImage> Images = new List<UploadedImage>();
    [Parameter]
    public string Id { get; set; } = default!;

    private string FormattedPrice => $"$ {ItemToView?.OriginalPrice:F2}";

    protected override async Task OnInitializedAsync()
    {
        var itemModel = await ItemService.GetInventoryItem(Guid.Parse(Id));

        if (itemModel != null)
        {
            ItemToView = itemModel;

            foreach (var image in ItemToView.Images)
            {
                Images.Add(new UploadedImage
                {
                    Name = image.Id.ToString(),
                    ImageData = $"data:image/png;base64,{Convert.ToBase64String(image.ImageData)}"
                });
            }
        }
        else
        {
            Navigation.NavigateTo("/404");
        }
    }

    private void EditItem()
    {
        Navigation.NavigateTo($"/InventoryItem/Edit/{Id}");
    }

    private async Task DeleteItem()
    {
        await ItemService.DeleteInventoryItem(Guid.Parse(Id));
        Navigation.NavigateTo("/InventoryItem/Search");
    }
}
