@page "/InventoryItem/Edit/{Id}"
@using Services;
@using System.Globalization;
@using System.Reflection.Metadata;
@using V_INVENTORY.MODEL;
@using V_INVENTORY.MODEL.DataContracts;
@using V_INVENTORY.MODEL.Models;
@inject InventoryItemService ItemService
@inject InventoryItemLocationService LocationService
@inject NavigationManager Navigation

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">Edit Inventory Item</div>
                <div class="card-body">
                    <EditForm Model="ItemToEdit" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (ErrorMessages.Count > 0)
                        {
                            <div class="alert alert-danger">
                                @foreach (var errorMessage in ErrorMessages)
                                {
                                    <p>@errorMessage</p>
                                }
                            </div>
                        }

                        <div class="form-group">
                            <label for="name">Name:</label>
                            <InputText id="name" class="form-control" @bind-Value="ItemToEdit.Name" />
                        </div>

                        <div class="form-group">
                            <label for="description">Description:</label>
                            <InputTextArea id="description" class="form-control" @bind-Value="ItemToEdit.Description" />
                        </div>

                        <div class="form-group">
                            <label for="quantity">Quantity:</label>
                            <InputNumber id="quantity" class="form-control" @bind-Value="ItemToEdit.Quantity" />
                        </div>

                        <div class="form-group">
                            <label for="location">Location:</label>
                            <InputSelect id="location" class="form-control" @bind-Value="ItemToEdit.LocationId">
                                <option value="">Select a location</option>
                                @foreach (var location in Locations)
                                {
                                    <option value="@location.Id">@location.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label for="buyPrice">Buy Price:</label>
                            <InputText id="buyPrice" class="form-control" @bind-Value="FormattedPrice" @oninput="UpdatePrice" />
                        </div>

                        <div class="form-group">
                            <label for="buyDate">Buy Date:</label>
                            <InputDate id="buyDate" class="form-control" @bind-Value="ItemToEdit.BuyDate" />
                        </div>

                        @*<div class="form-group mt-2">
                            <label for="imageUpload">Upload Images:</label>
                            <InputFile id="imageUpload" multiple OnChange="e => HandleImageUpload(e)" />
                        </div>

                        <div class="row mt-2">
                            @foreach (var image in UploadedImages)
                            {
                                <div class="col-12 col-sm-6 col-xl-3">
                                    <div class="card">
                                        <div class="image-wrapper">
                                            <img class="card-img-top img-fluid" src="@image.ImageData" alt="Image thumbnail" />
                                            <button class="btn btn-danger delete-button" @onclick="() => RemoveImage(image)">X</button>
                                        </div>
                                        <div class="card-body">
                                            <p class="card-text">@image.Name</p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>*@

                        <button type="submit" class="btn btn-primary mt-3">Submit</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private InventoryItemTO ItemToEdit = new InventoryItemTO();
    private IEnumerable<InventoryItemLocation> Locations = new List<InventoryItemLocation>();
    private List<string> ErrorMessages { get; set; } = new List<string>();
    [Parameter]
    public string Id { get; set; } = default!;

    private string FormattedPrice
    {
        get => $"$ {ItemToEdit.OriginalPrice:F2}";
        set => ItemToEdit.OriginalPrice = decimal.Parse(value, NumberStyles.Currency);
    }

    protected override async Task OnInitializedAsync()
    {
        Locations = await LocationService.GetAllInventoryItemLocations();

        // Load the existing item details based on the given id
        var itemModel = await ItemService.GetInventoryItem(Guid.Parse(Id));

        // Convert the model to a transfer object (TO)
        // Assuming you have a method to do this. Adjust as needed
        ItemToEdit = ConvertModelToTO(itemModel);
    }

    private async Task HandleValidSubmit()
    {
        var result = await ItemService.UpdateInventoryItem(ItemToEdit);
        if (result != null)
        {
            Navigation.NavigateTo($"InventoryItem/{result.Id}");
        }
        else
        {
            ErrorMessages.Add("Failed to update inventory item.");
        }
    }

    void UpdatePrice(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), NumberStyles.Currency, CultureInfo.CurrentCulture, out decimal newPrice))
        {
            ItemToEdit.OriginalPrice = newPrice;
        }
    }

    private InventoryItemTO ConvertModelToTO(InventoryItem model)
    {
        return new InventoryItemTO
        {
            Id = model.Id,
            Name = model.Name,
            Description = model.Description,
            Quantity = model.Quantity,
            LocationId = model.LocationId,
            OriginalPrice = model.OriginalPrice,
            BuyDate = model.BuyDate
        };
    }
}
